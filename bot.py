import random
import unicodedata
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = "7371994863:AAGB17gH3Ia0YzDS3GV91cYbJ_IXQHDIDTQ"

MIN_PLAYERS = 2
MAX_PLAYERS = 5

players = []
player_names = {}
hands = {}
deck = []
discard_pile = []
lobby_open = False
game_started = False
current_turn = 0

RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
SUITS_CANON = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
SUIT_VARIANTS = {
    '‚ô†': ['‚ô†','‚ô†Ô∏è','üñ§'],
    '‚ô•': ['‚ô•','‚ô•Ô∏è','‚ù§Ô∏è'],
    '‚ô¶': ['‚ô¶','‚ô¶Ô∏è'],
    '‚ô£': ['‚ô£','‚ô£Ô∏è','‚ôß'],
}

def create_deck():
    return [r + s for s in SUITS_CANON for r in RANKS]

def normalize_card_input(raw: str) -> str:
    s = unicodedata.normalize('NFKC', raw).replace('\uFE0F','').strip().upper()
    for r in sorted(RANKS, key=len, reverse=True):
        if s.startswith(r):
            suit = s[len(r):]
            for canon, vars in SUIT_VARIANTS.items():
                if any(unicodedata.normalize('NFKC', v).upper() == suit for v in vars):
                    return r + canon
    return s

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ –ü—Ä–∞–≤–∏–ª–∞ (–ø–æ—Ö–æ–∂–µ –Ω–∞ ¬´Crazy Eights¬ª):\n"
        "‚Äî –†–∞–∑–¥–∞—Ç—å 5 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É\n"
        "‚Äî –ü–µ—Ä–≤—ã–π –≤ –ª–æ–±–±–∏ –∏–≥—Ä–∞–µ—Ç /newgame\n"
        "‚Äî –ò–≥—Ä–æ–∫–∏ /join (2‚Äì5 —á–µ–ª.)\n"
        "‚Äî /begin ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ä—Ç–∏—é, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
        "‚Äî /hand ‚Äî –≤–∞—à–∏ –∫–∞—Ä—Ç—ã\n"
        "‚Äî /play <–∫–∞—Ä—Ç–∞> ‚Äî —Å—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ —Ä–∞–Ω–≥–∞\n"
        "‚Äî /draw ‚Äî –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–∞ (—Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ)\n"
        "‚Äî –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤."
    )

async def newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global players, player_names, hands, deck, discard_pile, lobby_open, game_started, current_turn
    players.clear(); player_names.clear(); hands.clear()
    deck.clear(); discard_pile.clear()
    lobby_open = True; game_started = False; current_turn = 0
    await update.message.reply_text("üîî –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥! –ò–≥—Ä–æ–∫–∏ ‚Äî /join (2‚Äì5 —á–µ–ª.)")

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global players, player_names, lobby_open
    uid = update.effective_user.id
    if not lobby_open:
        return await update.message.reply_text("‚ö† –õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ. /newgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    if uid in players:
        return await update.message.reply_text("‚ö† –í—ã —É–∂–µ –≤ –ª–æ–±–±–∏.")
    if len(players) >= MAX_PLAYERS:
        return await update.message.reply_text("‚ö† –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
    players.append(uid)
    player_names[uid] = update.effective_user.username or update.effective_user.first_name
    await update.message.reply_text(f"‚úÖ {player_names[uid]} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ({len(players)}/{MAX_PLAYERS})")

async def begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global lobby_open, game_started, deck, hands, discard_pile, current_turn
    if not lobby_open:
        return await update.message.reply_text("‚ö† –õ–æ–±–±–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç. /newgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    if len(players) < MIN_PLAYERS:
        return await update.message.reply_text(f"‚ö† –ù—É–∂–Ω—ã –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞.")
    lobby_open = False; game_started = True
    deck[:] = create_deck(); random.shuffle(deck)
    hands.update({uid: [deck.pop() for _ in range(5)] for uid in players})
    discard_pile.append(deck.pop())
    current_turn = 0
    top = discard_pile[-1]
    first = player_names[players[0]]
    await update.message.reply_text(
        f"üÉè –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞: {top}\n"
        f"–•–æ–¥–∏—Ç: {first}"
    )

async def hand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not game_started or uid not in hands:
        return await update.message.reply_text("‚ö† –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
    name = player_names[uid]
    cards = ", ".join(hands[uid])
    await update.message.reply_text(f"–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ {name}:\n{cards}")

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_turn, game_started
    text = update.message.text or ""
    if not text.lower().startswith("/play"): return
    raw = text[len("/play"):].strip()
    if not raw:
        return await update.message.reply_text("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ä—Ç—É: /play <–∫–∞—Ä—Ç–∞>")
    card = normalize_card_input(raw)
    uid = update.effective_user.id
    if not game_started:
        return await update.message.reply_text("‚ö† –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
    if uid not in hands:
        return await update.message.reply_text("‚ö† –í—ã –Ω–µ –≤ –∏–≥—Ä–µ.")
    if players[current_turn] != uid:
        nxt = player_names[players[current_turn]]
        return await update.message.reply_text(f"‚ö† –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {nxt}.")
    top = discard_pile[-1]
    if card not in hands[uid]:
        your = ", ".join(hands[uid])
        return await update.message.reply_text(f"‚ö† –£ –≤–∞—Å –Ω–µ—Ç ¬´{card}¬ª. –í–∞—à–∏: {your}")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–≥–∞/–º–∞—Å—Ç–∏
    if card[0:len(card)-1] != top[0:len(top)-1] and card[-1] != top[-1]:
        return await update.message.reply_text(
            f"‚ö† –ù–µ–ª—å–∑—è —Å—ã–≥—Ä–∞—Ç—å {card}, –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Ä–∞–Ω–≥—É –∏–ª–∏ –º–∞—Å—Ç–∏ —Å {top}."
        )
    hands[uid].remove(card)
    discard_pile.append(card)
    await update.message.reply_text(f"üÉ¥ {player_names[uid]} —Å—ã–≥—Ä–∞–ª {card}.")
    if not hands[uid]:
        await update.message.reply_text(f"üèÜ –ü–æ–±–µ–¥–∏–ª {player_names[uid]}! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        # —Å–±—Ä–æ—Å
        players.clear(); player_names.clear(); hands.clear()
        deck.clear(); discard_pile.clear()
        game_started = False
        return
    # —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
    current_turn = (current_turn + 1) % len(players)
    nxt = player_names[players[current_turn]]
    await update.message.reply_text(f"–û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞: {discard_pile[-1]}\n–•–æ–¥–∏—Ç {nxt}.")

async def draw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_turn
    uid = update.effective_user.id
    if not game_started:
        return await update.message.reply_text("‚ö† –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
    if uid not in hands:
        return await update.message.reply_text("‚ö† –í—ã –Ω–µ –≤ –∏–≥—Ä–µ.")
    if players[current_turn] != uid:
        nxt = player_names[players[current_turn]]
        return await update.message.reply_text(f"‚ö† –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {nxt}.")
    if not deck:
        await update.message.reply_text("üÉè –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞.")
    else:
        card = deck.pop()
        hands[uid].append(card)
        await update.message.reply_text(f"üÉè –í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É: {card}")
    current_turn = (current_turn + 1) % len(players)
    nxt = player_names[players[current_turn]]
    await update.message.reply_text(f"–•–æ–¥–∏—Ç {nxt}.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("newgame", newgame))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("begin", begin))
    app.add_handler(CommandHandler("hand", hand))
    app.add_handler(CommandHandler("play", play))
    app.add_handler(CommandHandler("draw", draw))
    app.run_polling()
print ("–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
